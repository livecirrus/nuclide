"use strict";

let Observable, trackOperationTiming;

module.exports = _client => {
  const remoteModule = {};

  remoteModule.TestFunctionA = function (arg0, arg1) {
    return _client.marshalArguments(Array.from(arguments), [{
      name: "arg1",
      type: {
        location: {
          type: "source",
          fileName: "FunctionService.def",
          line: 1
        },
        kind: "string"
      }
    }, {
      name: "arg2",
      type: {
        location: {
          type: "source",
          fileName: "FunctionService.def",
          line: 1
        },
        kind: "boolean"
      }
    }]).then(args => {
      return _client.callRemoteFunction("FunctionService/TestFunctionA", "promise", args);
    }).then(value => {
      return _client.unmarshal(value, {
        location: {
          type: "source",
          fileName: "FunctionService.def",
          line: 1
        },
        kind: "array",
        type: {
          location: {
            type: "source",
            fileName: "FunctionService.def",
            line: 1
          },
          kind: "string"
        }
      });
    });
  };

  remoteModule.TestFunctionB = function () {
    return Observable.fromPromise(_client.marshalArguments(Array.from(arguments), []).then(args => {
      return _client.callRemoteFunction("FunctionService/TestFunctionB", "observable", args);
    })).concatMap(id => id).concatMap(value => {
      return _client.unmarshal(value, {
        location: {
          type: "source",
          fileName: "FunctionService.def",
          line: 3
        },
        kind: "number"
      });
    });
  };

  remoteModule.TestFunctionC = function () {
    return _client.marshalArguments(Array.from(arguments), []).then(args => {
      return _client.callRemoteFunction("FunctionService/TestFunctionC", "void", args);
    });
  };

  remoteModule.TestFunctionD = function (arg0, arg1) {
    return _client.marshalArguments(Array.from(arguments), [{
      name: "p1",
      type: {
        location: {
          type: "source",
          fileName: "FunctionService.def",
          line: 7
        },
        kind: "nullable",
        type: {
          location: {
            type: "source",
            fileName: "FunctionService.def",
            line: 7
          },
          kind: "named",
          name: "Object"
        }
      }
    }, {
      name: "p2",
      type: {
        location: {
          type: "source",
          fileName: "FunctionService.def",
          line: 7
        },
        kind: "nullable",
        type: {
          location: {
            type: "source",
            fileName: "FunctionService.def",
            line: 7
          },
          kind: "named",
          name: "Object"
        }
      }
    }]).then(args => {
      return _client.callRemoteFunction("FunctionService/TestFunctionD", "void", args);
    });
  };

  remoteModule.ReturnAlias = function () {
    return _client.marshalArguments(Array.from(arguments), []).then(args => {
      return _client.callRemoteFunction("FunctionService/ReturnAlias", "promise", args);
    }).then(value => {
      return _client.unmarshal(value, {
        location: {
          type: "source",
          fileName: "FunctionService.def",
          line: 9
        },
        kind: "number"
      });
    });
  };

  return remoteModule;
};

Object.defineProperty(module.exports, "inject", {
  value: function () {
    Observable = arguments[0];
    trackOperationTiming = arguments[1];
  }
});
Object.defineProperty(module.exports, "defs", {
  value: new Map([["Object", {
    kind: "alias",
    name: "Object",
    location: {
      type: "builtin"
    }
  }], ["Date", {
    kind: "alias",
    name: "Date",
    location: {
      type: "builtin"
    }
  }], ["RegExp", {
    kind: "alias",
    name: "RegExp",
    location: {
      type: "builtin"
    }
  }], ["Buffer", {
    kind: "alias",
    name: "Buffer",
    location: {
      type: "builtin"
    }
  }], ["fs.Stats", {
    kind: "alias",
    name: "fs.Stats",
    location: {
      type: "builtin"
    }
  }], ["NuclideUri", {
    kind: "alias",
    name: "NuclideUri",
    location: {
      type: "builtin"
    }
  }], ["TestFunctionA", {
    kind: "function",
    name: "TestFunctionA",
    location: {
      type: "source",
      fileName: "FunctionService.def",
      line: 1
    },
    type: {
      location: {
        type: "source",
        fileName: "FunctionService.def",
        line: 1
      },
      kind: "function",
      argumentTypes: [{
        name: "arg1",
        type: {
          location: {
            type: "source",
            fileName: "FunctionService.def",
            line: 1
          },
          kind: "string"
        }
      }, {
        name: "arg2",
        type: {
          location: {
            type: "source",
            fileName: "FunctionService.def",
            line: 1
          },
          kind: "boolean"
        }
      }],
      returnType: {
        location: {
          type: "source",
          fileName: "FunctionService.def",
          line: 1
        },
        kind: "promise",
        type: {
          location: {
            type: "source",
            fileName: "FunctionService.def",
            line: 1
          },
          kind: "array",
          type: {
            location: {
              type: "source",
              fileName: "FunctionService.def",
              line: 1
            },
            kind: "string"
          }
        }
      }
    }
  }], ["TestFunctionB", {
    kind: "function",
    name: "TestFunctionB",
    location: {
      type: "source",
      fileName: "FunctionService.def",
      line: 3
    },
    type: {
      location: {
        type: "source",
        fileName: "FunctionService.def",
        line: 3
      },
      kind: "function",
      argumentTypes: [],
      returnType: {
        location: {
          type: "source",
          fileName: "FunctionService.def",
          line: 3
        },
        kind: "observable",
        type: {
          location: {
            type: "source",
            fileName: "FunctionService.def",
            line: 3
          },
          kind: "number"
        }
      }
    }
  }], ["TestFunctionC", {
    kind: "function",
    name: "TestFunctionC",
    location: {
      type: "source",
      fileName: "FunctionService.def",
      line: 5
    },
    type: {
      location: {
        type: "source",
        fileName: "FunctionService.def",
        line: 5
      },
      kind: "function",
      argumentTypes: [],
      returnType: {
        location: {
          type: "source",
          fileName: "FunctionService.def",
          line: 5
        },
        kind: "void"
      }
    }
  }], ["TestFunctionD", {
    kind: "function",
    name: "TestFunctionD",
    location: {
      type: "source",
      fileName: "FunctionService.def",
      line: 7
    },
    type: {
      location: {
        type: "source",
        fileName: "FunctionService.def",
        line: 7
      },
      kind: "function",
      argumentTypes: [{
        name: "p1",
        type: {
          location: {
            type: "source",
            fileName: "FunctionService.def",
            line: 7
          },
          kind: "nullable",
          type: {
            location: {
              type: "source",
              fileName: "FunctionService.def",
              line: 7
            },
            kind: "named",
            name: "Object"
          }
        }
      }, {
        name: "p2",
        type: {
          location: {
            type: "source",
            fileName: "FunctionService.def",
            line: 7
          },
          kind: "nullable",
          type: {
            location: {
              type: "source",
              fileName: "FunctionService.def",
              line: 7
            },
            kind: "named",
            name: "Object"
          }
        }
      }],
      returnType: {
        location: {
          type: "source",
          fileName: "FunctionService.def",
          line: 7
        },
        kind: "void"
      }
    }
  }], ["PN", {
    kind: "alias",
    location: {
      type: "source",
      fileName: "FunctionService.def",
      line: 9
    },
    name: "PN",
    definition: {
      location: {
        type: "source",
        fileName: "FunctionService.def",
        line: 9
      },
      kind: "promise",
      type: {
        location: {
          type: "source",
          fileName: "FunctionService.def",
          line: 9
        },
        kind: "number"
      }
    }
  }], ["ReturnAlias", {
    kind: "function",
    name: "ReturnAlias",
    location: {
      type: "source",
      fileName: "FunctionService.def",
      line: 11
    },
    type: {
      location: {
        type: "source",
        fileName: "FunctionService.def",
        line: 11
      },
      kind: "function",
      argumentTypes: [],
      returnType: {
        location: {
          type: "source",
          fileName: "FunctionService.def",
          line: 9
        },
        kind: "promise",
        type: {
          location: {
            type: "source",
            fileName: "FunctionService.def",
            line: 9
          },
          kind: "number"
        }
      }
    }
  }]])
});