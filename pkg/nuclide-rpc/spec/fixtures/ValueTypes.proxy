"use strict";

let Observable, trackOperationTiming;

module.exports = _client => {
  const remoteModule = {};

  remoteModule.ValueTypeTestA = function (arg0, arg1) {
    return _client.marshalArguments(Array.from(arguments), [{
      name: "arg0",
      type: {
        location: {
          type: "source",
          fileName: "ValueTypes.def",
          line: 15
        },
        kind: "named",
        name: "ValueTypeA"
      }
    }, {
      name: "arg1",
      type: {
        location: {
          type: "source",
          fileName: "ValueTypes.def",
          line: 15
        },
        kind: "nullable",
        type: {
          location: {
            type: "source",
            fileName: "ValueTypes.def",
            line: 15
          },
          kind: "named",
          name: "ValueTypeB"
        }
      }
    }]).then(args => {
      return _client.callRemoteFunction("ValueTypes/ValueTypeTestA", "promise", args);
    }).then(value => {
      return _client.unmarshal(value, {
        location: {
          type: "source",
          fileName: "ValueTypes.def",
          line: 15
        },
        kind: "named",
        name: "ValueTypeA"
      });
    });
  };

  remoteModule.ValueTypeTestB = function (arg0, arg1) {
    return _client.marshalArguments(Array.from(arguments), [{
      name: "arg0",
      type: {
        location: {
          type: "source",
          fileName: "ValueTypes.def",
          line: 17
        },
        kind: "named",
        name: "ValueTypeA"
      }
    }, {
      name: "arg1",
      type: {
        location: {
          type: "source",
          fileName: "ValueTypes.def",
          line: 17
        },
        kind: "array",
        type: {
          location: {
            type: "source",
            fileName: "ValueTypes.def",
            line: 17
          },
          kind: "named",
          name: "ValueTypeB"
        }
      }
    }]).then(args => {
      return _client.callRemoteFunction("ValueTypes/ValueTypeTestB", "promise", args);
    }).then(value => {
      return _client.unmarshal(value, {
        location: {
          type: "source",
          fileName: "ValueTypes.def",
          line: 18
        },
        kind: "object",
        fields: [{
          location: {
            type: "source",
            fileName: "ValueTypes.def",
            line: 19
          },
          name: "field1",
          type: {
            location: {
              type: "source",
              fileName: "ValueTypes.def",
              line: 19
            },
            kind: "string"
          },
          optional: false
        }, {
          location: {
            type: "source",
            fileName: "ValueTypes.def",
            line: 20
          },
          name: "field2",
          type: {
            location: {
              type: "source",
              fileName: "ValueTypes.def",
              line: 20
            },
            kind: "string"
          },
          optional: false
        }]
      });
    });
  };

  remoteModule.QualifiedTypeNameTest = function (arg0) {
    return _client.marshalArguments(Array.from(arguments), [{
      name: "arg0",
      type: {
        location: {
          type: "source",
          fileName: "ValueTypes.def",
          line: 23
        },
        kind: "named",
        name: "fs.Stats"
      }
    }]).then(args => {
      return _client.callRemoteFunction("ValueTypes/QualifiedTypeNameTest", "void", args);
    });
  };

  return remoteModule;
};

Object.defineProperty(module.exports, "inject", {
  value: function () {
    Observable = arguments[0];
    trackOperationTiming = arguments[1];
  }
});
Object.defineProperty(module.exports, "defs", {
  value: new Map([["Object", {
    kind: "alias",
    name: "Object",
    location: {
      type: "builtin"
    }
  }], ["Date", {
    kind: "alias",
    name: "Date",
    location: {
      type: "builtin"
    }
  }], ["RegExp", {
    kind: "alias",
    name: "RegExp",
    location: {
      type: "builtin"
    }
  }], ["Buffer", {
    kind: "alias",
    name: "Buffer",
    location: {
      type: "builtin"
    }
  }], ["fs.Stats", {
    kind: "alias",
    name: "fs.Stats",
    location: {
      type: "builtin"
    }
  }], ["NuclideUri", {
    kind: "alias",
    name: "NuclideUri",
    location: {
      type: "builtin"
    }
  }], ["ValueTypeA", {
    kind: "alias",
    location: {
      type: "source",
      fileName: "ValueTypes.def",
      line: 1
    },
    name: "ValueTypeA",
    definition: {
      location: {
        type: "source",
        fileName: "ValueTypes.def",
        line: 1
      },
      kind: "object",
      fields: [{
        location: {
          type: "source",
          fileName: "ValueTypes.def",
          line: 2
        },
        name: "valueA",
        type: {
          location: {
            type: "source",
            fileName: "ValueTypes.def",
            line: 2
          },
          kind: "string"
        },
        optional: false
      }, {
        location: {
          type: "source",
          fileName: "ValueTypes.def",
          line: 3
        },
        name: "valueB",
        type: {
          location: {
            type: "source",
            fileName: "ValueTypes.def",
            line: 3
          },
          kind: "nullable",
          type: {
            location: {
              type: "source",
              fileName: "ValueTypes.def",
              line: 3
            },
            kind: "named",
            name: "ValueTypeB"
          }
        },
        optional: false
      }, {
        location: {
          type: "source",
          fileName: "ValueTypes.def",
          line: 4
        },
        name: "valueC",
        type: {
          location: {
            type: "source",
            fileName: "ValueTypes.def",
            line: 4
          },
          kind: "boolean"
        },
        optional: true
      }, {
        location: {
          type: "source",
          fileName: "ValueTypes.def",
          line: 5
        },
        name: "valueD",
        type: {
          location: {
            type: "source",
            fileName: "ValueTypes.def",
            line: 5
          },
          kind: "any"
        },
        optional: false
      }, {
        location: {
          type: "source",
          fileName: "ValueTypes.def",
          line: 6
        },
        name: "valueE",
        type: {
          location: {
            type: "source",
            fileName: "ValueTypes.def",
            line: 6
          },
          kind: "mixed"
        },
        optional: false
      }, {
        location: {
          type: "source",
          fileName: "ValueTypes.def",
          line: 7
        },
        name: "valueF",
        type: {
          location: {
            type: "source",
            fileName: "ValueTypes.def",
            line: 7
          },
          kind: "named",
          name: "Object"
        },
        optional: false
      }]
    }
  }], ["ValueTypeB", {
    kind: "alias",
    location: {
      type: "source",
      fileName: "ValueTypes.def",
      line: 10
    },
    name: "ValueTypeB",
    definition: {
      location: {
        type: "source",
        fileName: "ValueTypes.def",
        line: 10
      },
      kind: "object",
      fields: [{
        location: {
          type: "source",
          fileName: "ValueTypes.def",
          line: 11
        },
        name: "valueA",
        type: {
          location: {
            type: "source",
            fileName: "ValueTypes.def",
            line: 11
          },
          kind: "tuple",
          types: [{
            location: {
              type: "source",
              fileName: "ValueTypes.def",
              line: 11
            },
            kind: "number"
          }, {
            location: {
              type: "source",
              fileName: "ValueTypes.def",
              line: 11
            },
            kind: "string"
          }]
        },
        optional: false
      }, {
        location: {
          type: "source",
          fileName: "ValueTypes.def",
          line: 12
        },
        name: "valueC",
        type: {
          location: {
            type: "source",
            fileName: "ValueTypes.def",
            line: 12
          },
          kind: "string"
        },
        optional: false
      }]
    }
  }], ["ValueTypeTestA", {
    kind: "function",
    name: "ValueTypeTestA",
    location: {
      type: "source",
      fileName: "ValueTypes.def",
      line: 15
    },
    type: {
      location: {
        type: "source",
        fileName: "ValueTypes.def",
        line: 15
      },
      kind: "function",
      argumentTypes: [{
        name: "arg0",
        type: {
          location: {
            type: "source",
            fileName: "ValueTypes.def",
            line: 15
          },
          kind: "named",
          name: "ValueTypeA"
        }
      }, {
        name: "arg1",
        type: {
          location: {
            type: "source",
            fileName: "ValueTypes.def",
            line: 15
          },
          kind: "nullable",
          type: {
            location: {
              type: "source",
              fileName: "ValueTypes.def",
              line: 15
            },
            kind: "named",
            name: "ValueTypeB"
          }
        }
      }],
      returnType: {
        location: {
          type: "source",
          fileName: "ValueTypes.def",
          line: 15
        },
        kind: "promise",
        type: {
          location: {
            type: "source",
            fileName: "ValueTypes.def",
            line: 15
          },
          kind: "named",
          name: "ValueTypeA"
        }
      }
    }
  }], ["ValueTypeTestB", {
    kind: "function",
    name: "ValueTypeTestB",
    location: {
      type: "source",
      fileName: "ValueTypes.def",
      line: 17
    },
    type: {
      location: {
        type: "source",
        fileName: "ValueTypes.def",
        line: 17
      },
      kind: "function",
      argumentTypes: [{
        name: "arg0",
        type: {
          location: {
            type: "source",
            fileName: "ValueTypes.def",
            line: 17
          },
          kind: "named",
          name: "ValueTypeA"
        }
      }, {
        name: "arg1",
        type: {
          location: {
            type: "source",
            fileName: "ValueTypes.def",
            line: 17
          },
          kind: "array",
          type: {
            location: {
              type: "source",
              fileName: "ValueTypes.def",
              line: 17
            },
            kind: "named",
            name: "ValueTypeB"
          }
        }
      }],
      returnType: {
        location: {
          type: "source",
          fileName: "ValueTypes.def",
          line: 18
        },
        kind: "promise",
        type: {
          location: {
            type: "source",
            fileName: "ValueTypes.def",
            line: 18
          },
          kind: "object",
          fields: [{
            location: {
              type: "source",
              fileName: "ValueTypes.def",
              line: 19
            },
            name: "field1",
            type: {
              location: {
                type: "source",
                fileName: "ValueTypes.def",
                line: 19
              },
              kind: "string"
            },
            optional: false
          }, {
            location: {
              type: "source",
              fileName: "ValueTypes.def",
              line: 20
            },
            name: "field2",
            type: {
              location: {
                type: "source",
                fileName: "ValueTypes.def",
                line: 20
              },
              kind: "string"
            },
            optional: false
          }]
        }
      }
    }
  }], ["QualifiedTypeNameTest", {
    kind: "function",
    name: "QualifiedTypeNameTest",
    location: {
      type: "source",
      fileName: "ValueTypes.def",
      line: 23
    },
    type: {
      location: {
        type: "source",
        fileName: "ValueTypes.def",
        line: 23
      },
      kind: "function",
      argumentTypes: [{
        name: "arg0",
        type: {
          location: {
            type: "source",
            fileName: "ValueTypes.def",
            line: 23
          },
          kind: "named",
          name: "fs.Stats"
        }
      }],
      returnType: {
        location: {
          type: "source",
          fileName: "ValueTypes.def",
          line: 23
        },
        kind: "void"
      }
    }
  }], ["A", {
    kind: "alias",
    location: {
      type: "source",
      fileName: "ValueTypes.def",
      line: 26
    },
    name: "A",
    definition: {
      location: {
        type: "source",
        fileName: "ValueTypes.def",
        line: 26
      },
      kind: "object",
      fields: [{
        location: {
          type: "source",
          fileName: "ValueTypes.def",
          line: 27
        },
        name: "f",
        type: {
          location: {
            type: "source",
            fileName: "ValueTypes.def",
            line: 27
          },
          kind: "nullable",
          type: {
            location: {
              type: "source",
              fileName: "ValueTypes.def",
              line: 27
            },
            kind: "named",
            name: "A"
          }
        },
        optional: false
      }, {
        location: {
          type: "source",
          fileName: "ValueTypes.def",
          line: 28
        },
        name: "o",
        type: {
          location: {
            type: "source",
            fileName: "ValueTypes.def",
            line: 28
          },
          kind: "named",
          name: "A"
        },
        optional: true
      }, {
        location: {
          type: "source",
          fileName: "ValueTypes.def",
          line: 29
        },
        name: "a",
        type: {
          location: {
            type: "source",
            fileName: "ValueTypes.def",
            line: 29
          },
          kind: "array",
          type: {
            location: {
              type: "source",
              fileName: "ValueTypes.def",
              line: 29
            },
            kind: "named",
            name: "A"
          }
        },
        optional: false
      }, {
        location: {
          type: "source",
          fileName: "ValueTypes.def",
          line: 30
        },
        name: "m",
        type: {
          location: {
            type: "source",
            fileName: "ValueTypes.def",
            line: 30
          },
          kind: "map",
          keyType: {
            location: {
              type: "source",
              fileName: "ValueTypes.def",
              line: 30
            },
            kind: "named",
            name: "A"
          },
          valueType: {
            location: {
              type: "source",
              fileName: "ValueTypes.def",
              line: 30
            },
            kind: "named",
            name: "A"
          }
        },
        optional: false
      }, {
        location: {
          type: "source",
          fileName: "ValueTypes.def",
          line: 31
        },
        name: "s",
        type: {
          location: {
            type: "source",
            fileName: "ValueTypes.def",
            line: 31
          },
          kind: "set",
          type: {
            location: {
              type: "source",
              fileName: "ValueTypes.def",
              line: 31
            },
            kind: "named",
            name: "A"
          }
        },
        optional: false
      }]
    }
  }]])
});