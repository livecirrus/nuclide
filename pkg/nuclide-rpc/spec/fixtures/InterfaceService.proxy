"use strict";

let Observable, trackOperationTiming;

module.exports = _client => {
  const remoteModule = {};
  remoteModule.Vector2 = class {
    static distance(arg0, arg1) {
      return _client.marshalArguments(Array.from(arguments), [{
        name: "a",
        type: {
          location: {
            type: "source",
            fileName: "InterfaceService.def",
            line: 3
          },
          kind: "named",
          name: "Vector2"
        }
      }, {
        name: "b",
        type: {
          location: {
            type: "source",
            fileName: "InterfaceService.def",
            line: 3
          },
          kind: "named",
          name: "Vector2"
        }
      }]).then(args => {
        return _client.callRemoteFunction("Vector2/distance", "promise", args);
      }).then(value => {
        return _client.unmarshal(value, {
          location: {
            type: "source",
            fileName: "InterfaceService.def",
            line: 3
          },
          kind: "number"
        });
      });
    }
    constructor(arg0, arg1) {
      _client.createRemoteObject("Vector2", this, [arg0, arg1], [{
        name: "x",
        type: {
          location: {
            type: "source",
            fileName: "InterfaceService.def",
            line: 2
          },
          kind: "number"
        }
      }, {
        name: "y",
        type: {
          location: {
            type: "source",
            fileName: "InterfaceService.def",
            line: 2
          },
          kind: "nullable",
          type: {
            location: {
              type: "source",
              fileName: "InterfaceService.def",
              line: 2
            },
            kind: "number"
          }
        }
      }])
    }
    len() {
      return trackOperationTiming("Vector2.len", () => {
        return _client.marshalArguments(Array.from(arguments), []).then(args => {
          return _client.marshal(this, {
            kind: "named",
            location: {
              type: "source",
              fileName: "InterfaceService.def",
              line: 1
            },
            name: "Vector2"
          }).then(id => {
            return _client.callRemoteMethod(id, "len", "promise", args);
          });
        }).then(value => {
          return _client.unmarshal(value, {
            location: {
              type: "source",
              fileName: "InterfaceService.def",
              line: 4
            },
            kind: "number"
          });
        });
      });
    }
    watchChanges() {
      return Observable.fromPromise(_client.marshalArguments(Array.from(arguments), []).then(args => {
        return _client.marshal(this, {
          kind: "named",
          location: {
            type: "source",
            fileName: "InterfaceService.def",
            line: 1
          },
          name: "Vector2"
        }).then(id => {
          return _client.callRemoteMethod(id, "watchChanges", "observable", args);
        });
      })).concatMap(id => id).concatMap(value => {
        return _client.unmarshal(value, {
          location: {
            type: "source",
            fileName: "InterfaceService.def",
            line: 6
          },
          kind: "number"
        });
      });
    }
    dispose() {
      return _client.disposeRemoteObject(this);
    }
  };

  remoteModule.getCurrentDirection = function () {
    return _client.marshalArguments(Array.from(arguments), []).then(args => {
      return _client.callRemoteFunction("InterfaceService/getCurrentDirection", "promise", args);
    }).then(value => {
      return _client.unmarshal(value, {
        location: {
          type: "source",
          fileName: "InterfaceService.def",
          line: 14
        },
        kind: "named",
        name: "Vector2"
      });
    });
  };

  remoteModule.Iface = class {
    p(arg0) {
      return trackOperationTiming("Iface.p", () => {
        return _client.marshalArguments(Array.from(arguments), [{
          name: {
            type: "Identifier",
            start: 642,
            end: 643,
            loc: {
              start: {
                line: 31,
                column: 4
              },
              end: {
                line: 31,
                column: 5
              }
            },
            name: "a"
          },
          type: {
            location: {
              type: "source",
              fileName: "InterfaceService.def",
              line: 31
            },
            kind: "number"
          }
        }]).then(args => {
          return _client.marshal(this, {
            kind: "named",
            location: {
              type: "source",
              fileName: "InterfaceService.def",
              line: 30
            },
            name: "Iface"
          }).then(id => {
            return _client.callRemoteMethod(id, "p", "promise", args);
          });
        }).then(value => {
          return _client.unmarshal(value, {
            location: {
              type: "source",
              fileName: "InterfaceService.def",
              line: 31
            },
            kind: "number"
          });
        });
      });
    }
    f() {
      return _client.marshalArguments(Array.from(arguments), []).then(args => {
        return _client.marshal(this, {
          kind: "named",
          location: {
            type: "source",
            fileName: "InterfaceService.def",
            line: 30
          },
          name: "Iface"
        }).then(id => {
          return _client.callRemoteMethod(id, "f", "void", args);
        });
      });
    }
    o() {
      return Observable.fromPromise(_client.marshalArguments(Array.from(arguments), []).then(args => {
        return _client.marshal(this, {
          kind: "named",
          location: {
            type: "source",
            fileName: "InterfaceService.def",
            line: 30
          },
          name: "Iface"
        }).then(id => {
          return _client.callRemoteMethod(id, "o", "observable", args);
        });
      })).concatMap(id => id).concatMap(value => {
        return _client.unmarshal(value, {
          location: {
            type: "source",
            fileName: "InterfaceService.def",
            line: 33
          },
          kind: "string"
        });
      });
    }
    dispose() {
      return _client.disposeRemoteObject(this);
    }
  };
  return remoteModule;
};

Object.defineProperty(module.exports, "inject", {
  value: function () {
    Observable = arguments[0];
    trackOperationTiming = arguments[1];
  }
});
Object.defineProperty(module.exports, "defs", {
  value: new Map([["Object", {
    kind: "alias",
    name: "Object",
    location: {
      type: "builtin"
    }
  }], ["Date", {
    kind: "alias",
    name: "Date",
    location: {
      type: "builtin"
    }
  }], ["RegExp", {
    kind: "alias",
    name: "RegExp",
    location: {
      type: "builtin"
    }
  }], ["Buffer", {
    kind: "alias",
    name: "Buffer",
    location: {
      type: "builtin"
    }
  }], ["fs.Stats", {
    kind: "alias",
    name: "fs.Stats",
    location: {
      type: "builtin"
    }
  }], ["NuclideUri", {
    kind: "alias",
    name: "NuclideUri",
    location: {
      type: "builtin"
    }
  }], ["Vector2", {
    kind: "interface",
    name: "Vector2",
    location: {
      type: "source",
      fileName: "InterfaceService.def",
      line: 1
    },
    constructorArgs: [{
      name: "x",
      type: {
        location: {
          type: "source",
          fileName: "InterfaceService.def",
          line: 2
        },
        kind: "number"
      }
    }, {
      name: "y",
      type: {
        location: {
          type: "source",
          fileName: "InterfaceService.def",
          line: 2
        },
        kind: "nullable",
        type: {
          location: {
            type: "source",
            fileName: "InterfaceService.def",
            line: 2
          },
          kind: "number"
        }
      }
    }],
    staticMethods: new Map([["distance", {
      location: {
        type: "source",
        fileName: "InterfaceService.def",
        line: 3
      },
      kind: "function",
      argumentTypes: [{
        name: "a",
        type: {
          location: {
            type: "source",
            fileName: "InterfaceService.def",
            line: 3
          },
          kind: "named",
          name: "Vector2"
        }
      }, {
        name: "b",
        type: {
          location: {
            type: "source",
            fileName: "InterfaceService.def",
            line: 3
          },
          kind: "named",
          name: "Vector2"
        }
      }],
      returnType: {
        location: {
          type: "source",
          fileName: "InterfaceService.def",
          line: 3
        },
        kind: "promise",
        type: {
          location: {
            type: "source",
            fileName: "InterfaceService.def",
            line: 3
          },
          kind: "number"
        }
      }
    }]]),
    instanceMethods: new Map([["len", {
      location: {
        type: "source",
        fileName: "InterfaceService.def",
        line: 4
      },
      kind: "function",
      argumentTypes: [],
      returnType: {
        location: {
          type: "source",
          fileName: "InterfaceService.def",
          line: 4
        },
        kind: "promise",
        type: {
          location: {
            type: "source",
            fileName: "InterfaceService.def",
            line: 4
          },
          kind: "number"
        }
      }
    }], ["watchChanges", {
      location: {
        type: "source",
        fileName: "InterfaceService.def",
        line: 6
      },
      kind: "function",
      argumentTypes: [],
      returnType: {
        location: {
          type: "source",
          fileName: "InterfaceService.def",
          line: 6
        },
        kind: "observable",
        type: {
          location: {
            type: "source",
            fileName: "InterfaceService.def",
            line: 6
          },
          kind: "number"
        }
      }
    }], ["dispose", {
      location: {
        type: "source",
        fileName: "InterfaceService.def",
        line: 11
      },
      kind: "function",
      argumentTypes: [],
      returnType: {
        location: {
          type: "source",
          fileName: "InterfaceService.def",
          line: 11
        },
        kind: "void"
      }
    }]])
  }], ["getCurrentDirection", {
    kind: "function",
    name: "getCurrentDirection",
    location: {
      type: "source",
      fileName: "InterfaceService.def",
      line: 14
    },
    type: {
      location: {
        type: "source",
        fileName: "InterfaceService.def",
        line: 14
      },
      kind: "function",
      argumentTypes: [],
      returnType: {
        location: {
          type: "source",
          fileName: "InterfaceService.def",
          line: 14
        },
        kind: "promise",
        type: {
          location: {
            type: "source",
            fileName: "InterfaceService.def",
            line: 14
          },
          kind: "named",
          name: "Vector2"
        }
      }
    }
  }], ["Iface", {
    kind: "interface",
    name: "Iface",
    location: {
      type: "source",
      fileName: "InterfaceService.def",
      line: 30
    },
    constructorArgs: null,
    staticMethods: new Map(),
    instanceMethods: new Map([["p", {
      location: {
        type: "source",
        fileName: "InterfaceService.def",
        line: 31
      },
      kind: "function",
      argumentTypes: [{
        name: {
          type: "Identifier",
          start: 642,
          end: 643,
          loc: {
            start: {
              line: 31,
              column: 4
            },
            end: {
              line: 31,
              column: 5
            }
          },
          name: "a"
        },
        type: {
          location: {
            type: "source",
            fileName: "InterfaceService.def",
            line: 31
          },
          kind: "number"
        }
      }],
      returnType: {
        location: {
          type: "source",
          fileName: "InterfaceService.def",
          line: 31
        },
        kind: "promise",
        type: {
          location: {
            type: "source",
            fileName: "InterfaceService.def",
            line: 31
          },
          kind: "number"
        }
      }
    }], ["f", {
      location: {
        type: "source",
        fileName: "InterfaceService.def",
        line: 32
      },
      kind: "function",
      argumentTypes: [],
      returnType: {
        location: {
          type: "source",
          fileName: "InterfaceService.def",
          line: 32
        },
        kind: "void"
      }
    }], ["o", {
      location: {
        type: "source",
        fileName: "InterfaceService.def",
        line: 33
      },
      kind: "function",
      argumentTypes: [],
      returnType: {
        location: {
          type: "source",
          fileName: "InterfaceService.def",
          line: 33
        },
        kind: "observable",
        type: {
          location: {
            type: "source",
            fileName: "InterfaceService.def",
            line: 33
          },
          kind: "string"
        }
      }
    }], ["dispose", {
      location: {
        type: "source",
        fileName: "InterfaceService.def",
        line: 35
      },
      kind: "function",
      argumentTypes: [],
      returnType: {
        location: {
          type: "source",
          fileName: "InterfaceService.def",
          line: 35
        },
        kind: "void"
      }
    }]])
  }]])
});